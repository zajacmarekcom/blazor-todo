@using ToDo.Shared.Dtos;
@inject IDialogService DialogService
@inject ITaskService TaskService

@if (CategoryId is not null)
{
    <MudText Typo="Typo.h5" Color="@Color.Inherit" Class="my-3 mx-2">Tasks in category: @CategoryName</MudText>
}

<MudDropContainer T="TaskItem" Items="Tasks" ItemsSelector="@((item,column) => item.Status == column)" ItemDropped="@((item) => OnDrop(item))" Class="d-flex flex-wrap flex-grow-1">
    <ChildContent>
        <MudGrid>
            <MudItem sm="12" md="6">
                <MudDropZone T="TaskItem" Identifier="@Status.ToDo.ToString()" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1" Style="min-height: 400px">
                    <MudText Typo="Typo.h6"><b>To Do</b></MudText>
                    <MudButton OnClick="OpenNewTaskDialog" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
                </MudDropZone>
            </MudItem>
            <MudItem sm="12" md="6">
                <MudDropZone T="TaskItem" Identifier="@Status.InProgress.ToString()" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1" Style="min-height: 400px">
                    <MudText Typo="Typo.h6"><b>In Progress</b></MudText>
                </MudDropZone>
            </MudItem>
        </MudGrid>
    </ChildContent>
    <ItemRenderer>
        <MudPaper Elevation="25" Class="pa-3 rounded-lg my-2 d-flex justify-space-between">
            <div class="px-1 me-2" style="@(GetBackground(context))">
            </div>
            <div>
                <MudText Typo="Typo.h6">@context.Title</MudText>
                <MudText Typo="Typo.body2">@context.Description</MudText>
            </div>
            <div>
                @if (context.Status == Status.InProgress.ToString())
                {
                    <MudIconButton OnClick="@(() => Finish(context))" Icon="@Icons.Material.Filled.Done" Variant="Variant.Filled" Color="Color.Success" Size="Size.Large" />
                }
                else
                {
                    <MudIconButton OnClick="@(() => OpenUpdateTaskDialog(new TaskDto(context.Id, context.Title, context.Description, Status.ToDo, context.Category)))" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Info" Size="Size.Medium" />
                    <MudIconButton OnClick="@(() => Remove(context))" Icon="@Icons.Material.Filled.Remove" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" />
                }
            </div>
        </MudPaper>
    </ItemRenderer>
</MudDropContainer>

<MudPaper Elevation="0" Class="mx-4">
    <MudSwitch @bind-Checked="ShowDone">Show done tasks</MudSwitch>

    @if (ShowDone)
    {
        <MudGrid>
            <MudItem sm="12">
                <MudPaper Elevation="0">
                    <MudText Typo="Typo.h6"><b>Done</b></MudText>
                    @foreach (var task in Tasks.Where(x => x.Status == Status.Done.ToString()))
                    {
                        <MudPaper Elevation="25" Class="pa-3 rounded-lg my-2 d-flex justify-start">
                            <div class="px-1 me-2" style="@(GetBackground(task))">
                            </div>
                            <div>
                                <MudText Typo="Typo.h6">@task.Title</MudText>
                                <MudText Typo="Typo.body2">@task.Description</MudText>
                            </div>
                        </MudPaper>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>

    }
</MudPaper>

@code {
    private List<TaskItem> Tasks { get; set; } = new List<TaskItem>();
    private bool ShowDone { get; set; } = false;
    private string? CategoryName { get; set; }

    [CascadingParameter] Guid? CategoryId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task OnDrop(MudItemDropInfo<TaskItem> drop)
    {
        drop.Item.Status = drop.DropzoneIdentifier;
        await TaskService.ChangeStatus(drop.Item.Id, Enum.Parse<Status>(drop.DropzoneIdentifier));
    }

    private async Task Finish(TaskItem task)
    {
        task.Status = Status.Done.ToString();
        await TaskService.ChangeStatus(task.Id, Status.Done);
        await LoadData();
    }

    private async Task Remove(TaskItem task)
    {
        await TaskService.Remove(task.Id);
        await LoadData();
    }

    private async Task OpenNewTaskDialog()
    {
        var categories = await TaskService.GetCategories();
        var parameters = new DialogParameters<NewTaskDialog> { { x => x.Categories, categories } };
        var dialog = await DialogService.ShowAsync<NewTaskDialog>("", parameters);
        var result = await dialog.Result;

        if (result.Data is not null)
        {
            await TaskService.Create(result.Data as NewTaskDto);
            await LoadData();
        }
    }

    private async Task OpenUpdateTaskDialog(TaskDto selectedTask)
    {
        var categories = await TaskService.GetCategories();
        var parameters = new DialogParameters<UpdateTaskDialog> { { x => x.Categories, categories }, { x => x.TaskToUpdate, selectedTask } };
        var dialog = await DialogService.ShowAsync<UpdateTaskDialog>("", parameters);
        var result = await dialog.Result;

        if (result.Data is not null)
        {
            await TaskService.Update(result.Data as UpdateTaskDto);
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        Tasks = (await TaskService.GetAll(CategoryId)).Select(x => new TaskItem
            {
                Id = x.Id,
                Title = x.Title,
                Description = x.Description,
                Category = x.Category,
                Status = x.Status.ToString()
            }).ToList();

        if (CategoryId is not null)
        {
            var category = await TaskService.GetCategory(CategoryId.Value);
            CategoryName = category?.Name;
        }
        StateHasChanged();
    }

    private string GetBackground(TaskItem task)
    {
        return "width: 24px; " + (task.Category is null ? "background-color: #fff" : $"background-color: {task.Category.Color}");
    }

    public class TaskItem
    {
        public Guid Id { get; set; }
        public string Title { get; set; }
        public string? Description { get; set; }
        public CategoryDto? Category { get; set; }
        public string Status { get; set; }
    }
}
